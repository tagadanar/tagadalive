include('../../auto')

/*
 * Objet qui contient l'ensemble des entités vivante alliée et ennemie
 */
class Fight {
	private static Map<integer, Entity> _aliveEnemies
	private static Map<integer, Entity> _aliveAllies
	private static Map<integer, Entity> _aliveAll
	private static Map<integer, Entity> _aliveAllLeeks
	private static Map<integer, Entity> _aliveAllBulbs
	private static Map<integer, Entity> _aliveEnemiesLeeks
	private static Map<integer, Entity> _aliveEnemiesBulbs
	private static Map<integer, Entity> _aliveAlliesLeeks
	private static Map<integer, Entity> _aliveAlliesBulbs
	static Array<integer> allEntitiesId
	static Entity self
	static Cell selfCell = Cell(1312)

	/*
	 * Actualise les tableaux contenant les entités vivante alliée et ennemie ainsi que l'ensemble des entités alliées + ennemies
	 */
	static void refresh(){
		_aliveEnemies = [:]
		_aliveAllies = [:]
		_aliveAll = [:]
		_aliveAllLeeks = [:]
		_aliveAllBulbs = [:]
		_aliveEnemiesLeeks = [:]
		_aliveEnemiesBulbs = [:]
		_aliveAlliesLeeks = [:]
		_aliveAlliesBulbs = [:]
		allEntitiesId = []
		for(integer e in getAliveEnemies()) {
			Entity entity = Entity(e)
			_aliveEnemies[e] = entity
			_aliveAll[e] = entity
			if(entity.isBulb){
				_aliveEnemiesBulbs[e] = entity
				_aliveAllBulbs[e] = entity
			} else {
				_aliveEnemiesLeeks[e] = entity
				_aliveAllLeeks[e] = entity
			}
		}
		for(integer a in getAliveAllies()) {
			Entity entity = Entity(a)
			_aliveAllies[a] = entity
			_aliveAll[a] = entity
			if(entity.isBulb){
				_aliveAlliesBulbs[a] = entity
				_aliveAllBulbs[a] = entity
			} else {
				_aliveAlliesLeeks[a] = entity
				_aliveAllLeeks[a] = entity
			}
		}
		self = _aliveAll[getEntity()]!
	}
	
	/*
	 * initialise les entités, doit être call à la fin du refresh de la Map pour bien init les reachableCells avec les bonnes cases occupés dans la Map
	 */
	static void refreshEntities(){
		for(Entity entity in _aliveAll){
			entity.init()
			push(allEntitiesId, entity.id)
		}
	}
	
	/*
	 * Renvoie Entity correspondant a l'id de l'entity demandée si elle est vivante
	 * @param entityId Id de l'Entity
	 * @return une Entity 
	 */
	static Entity getEntity(integer entityId) {
		return _aliveAll[entityId]!
	}
	
	/*
	 * Renvoie un tableau contenant les ennemis vivants
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getEnemiesAlive() {
		return _aliveEnemies
	}
	
	/*
	 * Renvoie un tableau contenant les ennemis non bulbes vivants
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getEnemiesLeeksAlive() {
		return _aliveEnemiesLeeks
	}
	
	/*
	 * Renvoie un tableau contenant les ennemis bulbes vivants
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getEnemiesBulbsAlive() {
		return _aliveEnemiesBulbs
	}
	
	/*
	 * Renvoie un tableau contenant les alliés vivants (moi compris dedans)
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getAlliesAlive() {
		return _aliveAllies
	}
	
	/*
	 * Renvoie un tableau contenant les alliés non bulbes vivants (moi compris dedans)
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getAlliesLeeksAlive() {
		return _aliveAlliesLeeks
	}
	
	/*
	 * Renvoie un tableau contenant les alliés bulbes vivants (moi compris dedans si je suis un bulbe)
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getAlliesBulbsAlive() {
		return _aliveAlliesBulbs
	}
	
	/*
	 * Renvoie un tableau contenant les ennemis et les alliés vivants (moi compris dedans)
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getAllAlive() {
		return _aliveAll
	}
	
	/*
	 * Renvoie un tableau contenant les ennemis et les alliés non bulbes vivants (moi compris dedans)
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getAllLeeksAlive() {
		return _aliveAllLeeks
	}
	
	/*
	 * Renvoie un tableau contenant les ennemis et les alliés bulbes vivants (moi compris dedans)
	 * @return un tableau d'Entity
	 */
	static Map<integer, Entity> getAllBulbsAlive() {
		return _aliveAllBulbs
	}
	
	/*
	 * Détecte les entités vivantes qui jouent avant l'entité entity en paramètre de la fonction
	 * cette fonction return une list avec @entity inclus, WORKING AS INTENDED !
	 * cette fonction est utile pour les cases à ignorer dans les fonctions de déplacement, je dois m'ignorer aussi
	 * ne devrait pas poser de problème ailleurs, mais je laisse ces commentaires pour qu'on y fasse attention
	 * quand on reviendra sur l'ordre de jeu, il est possible que cette fonction mérite un rename pour la distinguer d'une autre sans self
	 * @param entity Entity 
	 * @return liste des entités vivantes alliés et ennemies 
	 */
	static Array<Entity> getEntitiesWhoPlayBefore(Entity entity) {
		if(entity == self) return [self];
		Array<Entity>  list = [self]
		integer self = self.turnOrder
		integer limit = entity.turnOrder
		for(Entity e in _aliveAll) {
			if(self < limit){
				if(self < e.turnOrder && e.turnOrder < limit) push(list, e)
			} else {
				if(self < e.turnOrder) push(list, e)
				if(e.turnOrder < limit) push(list, e)
			}
		}
		return list;
	}
}