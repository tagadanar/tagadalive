include('../../auto')

/*
 * Ensemble de méthodes et d'algorithmes permettant d'instancier les items de type Item et de les classer par ordre d'importance
 */
class Items {
	private static Map<integer, Item> _items = [:]
	private static Map<integer, Array<Item>> _stuff = [:]
	
	/*
	 * Initialise toutes les équipements disponible dans le jeu
	 */
	static void init() {
		for(integer i in getAllWeapons()+getAllChips()) {
			_items[i] = new Item(i)
		}
	}
	
	/*
	 * Renvoie toutes les informations de l'arme / puce en paramètre
	 * @param itemId id de l'item 
	 * @return Item 
	 */
	static Item? getItem(integer? itemId){
		if (itemId == null) return null
		return _items[itemId!]
	}
	
	/*
	 * Renvoie toutes les informations de l'arme / puce en paramètre
	 * @param itemId id de l'item 
	 * @return Item 
	 */
	static Map<integer, Item> getAllItems(){
		return _items
	}
	
	/*
	 * Renvoie un tableau d'items équipé sur une Entity 
	 * @param entityId id de l'Entity
	 * @return tableau d'Item
	 */
	static Array<Item> getItems(integer entityId) {
		if(!_stuff[entityId]){
			_stuff[entityId] = []
			Array<integer>? weapons = getWeapons(entityId)
			if (weapons != null) {
				for(integer itemId in weapons!){
					push(_stuff[entityId]!, _items[itemId]);
				}
			}
			Array<integer>? chips = getChips(entityId)
			if (chips != null) {
				for(integer itemId in chips!){
					push(_stuff[entityId]!, _items[itemId]);
				}
			}
		}
		return _stuff[entityId]!
	}
	
	/*
	 * Appel la fonction getOrderedOffensiveItems avec moi en guise de cible d'une entité en paramètre
	 * @param entity Entity ennemie
	 * @return tableau d'Item classé par dangerosité
	 */
	static Array<Item> getOrderedOffensiveItems(Entity entity) {
		return Items.getOrderedOffensiveItems(entity, Fight.self)
	}
	
	/*
	 * Classifie les Item items d'une Entity entity par dangerosité sur une Entity target
	 * @param entity Entity attaquant
	 * @param target Entity ciblé
	 * @return tableau d'Item classé par dangerosité
	 */
	static Array<Item> getOrderedOffensiveItems(Entity entity, Entity target) {
		real dmg
		integer cost
		Array<ItemEffect> effects
		Map<Item, real> dmgPerItem = [:]
		//Array<Item> stuff = Items.getItems(entity.id)
		integer absShield = target.absShield, relShield = target.relShield;
		// reminder le cd est décrément au début du round, donc 1 est utilisable next rnd, sauf pour moi même
		integer limitCD = entity == Fight.self ? 0 : 1
		for(Item item in entity.items){
			if(item.haveCD && getCooldown(item.id, entity.id)>limitCD) continue;
			dmg=0.0;
			for(ItemEffect e in item.effects){
				if(e.type == EFFECT_DAMAGE ){
					dmg += (e.avg*(1+(entity.str/100))*(1+(entity.pwr/100))*(1-(relShield/100)))-absShield;
				}
				else if(e.type == EFFECT_POISON){
					dmg += e.avg*(1+(entity.mgc/100))*(1+(entity.pwr/100))*e.duration;
				}
				else if(e.type == EFFECT_HEAL){
					dmg -= e.avg*(1+(entity.wsd/100));
				}
				// ici add les effets d'entrave en score pts->dmg
			}
			if(dmg>0) dmgPerItem[item] = dmg/item.cost;
		}
		return arraySort(mapKeys(dmgPerItem), (Item a, Item b) => integer {	
			if(dmgPerItem[a]<dmgPerItem[b]) return 1;
			else if(dmgPerItem[a]>dmgPerItem[b]) return -1;
			return 0;
		}) as Array<Item>;
	}
	
	/*
	 * Classifie les Item items d'une Entity entity par effet bénéfique défensif
	 * @param entity Entity 
	 * @return tableau d'Item classé par effet bénéfique défensif
	 */
	static Array<Item> getOrderedDefensiveItems(Entity entity){
		real dmg
		integer cost
		Array<ItemEffect> effects
		Map<Item, real> dmgPerItem = [:]
		integer absShield = entity.absShield, relShield = entity.relShield;
		for(Item item in entity.items){
			// reminder le cd est décrément au début du round, donc 1 est utilisable next rnd
			if(item.haveCD && getCooldown(item.id, entity.id)>1) continue;
			dmg=0.0;
			for(ItemEffect e in effects){
				if(e.type == EFFECT_HEAL){
					dmg+= e.avg*(1+(entity.wsd/100));
				}
				else if(e.type == EFFECT_ABSOLUTE_SHIELD){
					dmg += e.avg*(1+(entity.rst/100)) *e.duration;
				}
				else if(e.type == EFFECT_RELATIVE_SHIELD){
					dmg += e.avg*(1+(entity.rst/100)) *e.duration *4; // FIXME le *4 devrait être une global de ratio abs/rel
				}
			}
			if(dmg>0) dmgPerItem[item] = dmg/item.cost;
		}
		return arraySort(mapKeys(dmgPerItem), (Item a, Item b) => integer {	
			if(dmgPerItem[a]<dmgPerItem[b]) return 1;
			else if(dmgPerItem[a]>dmgPerItem[b]) return -1;
			return 0;
		}) as Array<Item>;
	}
}
