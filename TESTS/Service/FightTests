include('../includesTests')

function testGetEntity() {
	var result = Fight.getEntity(getNearestEnemy()).id
	var expected = getNearestEnemy()
	
	assertEquals("FightTests::testGetEntity", expected, result)
}

function testGetEnemiesAliveIsNotEmpty() {
	var result = mapSize(Fight.getEnemiesAlive())
	var expected = count(getAliveEnemies())
	
	assertEquals("FightTests::testGetEnemiesAliveIsNotEmpty", expected, result)
}

function testGetEnemiesAlive() {
	var result = []
	for (Entity entity in Fight.getEnemiesAlive()) 
		push(result, entity.id)
	
	var expected = getAliveEnemies()
	
	assertEquals("FightTests::testGetEnemiesAlive", expected, result)
}

function testGetAlliesAliveIsNotEmpty() {
	var result = mapSize(Fight.getAlliesAlive())
	var expected = count(getAliveAllies())
	
	assertEquals("FightTests::testGetAlliesAliveIsNotEmpty", expected, result)
}

function testGetAlliesAlive() {
	var result = []
	for (Entity entity in Fight.getAlliesAlive()) 
		push(result, entity.id)
	
	var expected = getAliveAllies()
	
	assertEquals("FightTests::testGetAlliesAlive", expected, result)
}

function testGetAllAliveIsNotEmpty() {
	integer result = mapSize(Fight.getAllAlive())
	integer expected = count(getAliveAllies()+getAliveEnemies())
	
	assertEquals("FightTests::testGetAllAliveIsNotEmpty", expected, result)
}

function testGetAllAlive() {
	var result = Fight.getAllAlive()
	var expected = getAliveAllies() + getAliveEnemies()
	
	assertEquals("FightTests::testGetAllAlive", expected, result)
}

function testGetListOfLeekWhoPlayBefore() {
	var expected = [Fight.self]
	var result = Fight.getEntitiesWhoPlayBefore(Fight.self)
	
	assertEquals("FightTests::testGetEntitiesWhoPlayBefore - Test 1", expected, result)
	
	// Pour info, ce test fonctionne uniquement si dans le scenario de test j'ai qu'un seul ennemi
	var expected2 = Entity(getEntity()).id
	var result2 = Fight.getEntitiesWhoPlayBefore(Entity(getNearestEnemy()))[0].id
	assertEquals("FightTests::testGetEntitiesWhoPlayBefore - Test 2", expected2, result2)
}

function checkFight() {
	testGetEntity()
	testGetEnemiesAliveIsNotEmpty()
	testGetEnemiesAlive()
	testGetAlliesAliveIsNotEmpty()
	testGetAlliesAlive()
	testGetAllAliveIsNotEmpty()
	testGetListOfLeekWhoPlayBefore()
}